var searchIndex = {};
searchIndex["tl_lang_syn"] = {"doc":"A parsing library for parsing a string of TL language schema into a syntax tree of TL language source text.","items":[[3,"BitIndex","tl_lang_syn","An index pointing to the n-th bit of a `#` value (or, an `u32` value).",null,null],[3,"CommentMultiLine","","A `/*...*/` comment spanning multiple lines.",null,null],[12,"slash_asterisk_token","","",0,null],[12,"content_span","","",0,null],[12,"content","","",0,null],[3,"CommentSingleLine","","A `//...` comment spanning a single line.",null,null],[12,"slash_slash_token","","",1,null],[12,"content_span","","",1,null],[12,"content","","",1,null],[3,"File","","",null,null],[12,"items","","",2,null],[3,"Id","","A 32-bit number which identifies a TL combinator.",null,null],[12,"span","","",3,null],[12,"id","","",3,null],[3,"Ident","","An identifier: `channels`, `SendMessageAction`.",null,null],[3,"BitSelector","","",null,null],[12,"dot_token","","",4,null],[12,"bit_index","","",4,null],[3,"CombinatorId","","",null,null],[12,"hash_token","","",5,null],[12,"id","","",5,null],[3,"ConditionalParamDef","","",null,null],[12,"var_ident","","",6,null],[12,"bit_selector","","",6,null],[12,"question_token","","",6,null],[3,"DelimiterTypes","","A `---types---` delimiter.",null,null],[12,"span","","",7,null],[3,"DelimiterFunctions","","A `---functions---` delimiter.",null,null],[12,"span","","",8,null],[3,"ItemCombinator","","",null,null],[12,"name","","",9,null],[12,"combinator_id","","",9,null],[12,"opt_params","","",9,null],[12,"params","","",9,null],[12,"equals_token","","",9,null],[12,"result_type","","",9,null],[12,"semicolon_token","","",9,null],[3,"ItemComment","","",null,null],[12,"comment","","",10,null],[3,"ItemDelimiter","","",null,null],[12,"delimiter","","",11,null],[3,"ItemLayer","","",null,null],[12,"slash_slash_token","","",12,null],[12,"layer_token","","",12,null],[12,"layer_span","","",12,null],[12,"layer","","",12,null],[3,"Multiplicity","","",null,null],[12,"term","","",13,null],[12,"asterisk_token","","",13,null],[3,"OptParam","","",null,null],[12,"brace_token","","",14,null],[12,"var_idents","","",14,null],[12,"colon_token","","",14,null],[12,"ty","","",14,null],[3,"ParamConditional","","",null,null],[12,"var_ident","","",15,null],[12,"colon_token","","",15,null],[12,"conditional_param_def","","",15,null],[12,"ty","","",15,null],[3,"ParamRepeated","","",null,null],[12,"param_repeated_ident","","",16,null],[12,"multiplicity","","",16,null],[12,"bracket_token","","",16,null],[12,"params","","",16,null],[3,"ParamRepeatedIdent","","",null,null],[12,"var_ident","","",17,null],[12,"colon_token","","",17,null],[3,"ParamTypeOnly","","",null,null],[12,"ty","","",18,null],[3,"ParamWithParen","","",null,null],[12,"paren_token","","",19,null],[12,"var_idents","","",19,null],[12,"colon_token","","",19,null],[12,"ty","","",19,null],[3,"AngleBracketedGenericArguments","","A comma-separated list of generic arguments enclosed in angle tokens.",null,null],[12,"langle_token","","",20,null],[12,"args","","",20,null],[12,"rangle_token","","",20,null],[3,"ParameterizedPath","","A dot-separated list of identifiers with optional generic arguments.",null,null],[12,"path","","",21,null],[12,"args","","",21,null],[3,"Path","","A dot-separated list of identifiers.",null,null],[12,"segments","","",22,null],[3,"SafeParameterizedPathSpaceImmune","","A parameterized path that spans a single token tree group.",null,null],[12,"path","","",23,null],[12,"args","","",23,null],[3,"SafeParameterizedPathParenthesized","","An arbitrary parameterized path enclosed in parentheses.",null,null],[12,"paren_token","","",24,null],[12,"parameterized_path","","",24,null],[3,"SpaceSeparatedGenericArguments","","A space-separated list of generic arguments.",null,null],[12,"args","","",25,null],[3,"TypeInt","","A special type of integers in range from 0 to 2^31-1 inclusive: `#`.",null,null],[12,"hash_token","","",26,null],[3,"TypeParameterizedPath","","A type represented by a safe parameterized path: `contacts.Link`, `messages.Chats`.",null,null],[12,"safe_parameterized_path","","",27,null],[3,"TypeTypeParameter","","A type parameter: `!X`.",null,null],[12,"excl_token","","",28,null],[12,"ident","","",28,null],[4,"Comment","","A single-line or multiline comment.",null,null],[13,"SingleLine","","",29,null],[13,"MultiLine","","",29,null],[4,"Delimiter","","Divides sections of declarations of TL combinators.",null,null],[13,"Types","","",30,null],[13,"Functions","","",30,null],[4,"Item","","",null,null],[13,"Combinator","","",31,null],[13,"Delimiter","","",31,null],[13,"Layer","","",31,null],[13,"Comment","","",31,null],[4,"Param","","",null,null],[13,"Conditional","","",32,null],[13,"Repeated","","",32,null],[13,"WithParen","","",32,null],[13,"TypeOnly","","",32,null],[4,"GenericArguments","","Generic arguments for parameterized paths.",null,null],[13,"AngleBracketed","","",33,null],[13,"SpaceSeparated","","",33,null],[4,"SafeParameterizedPath","","A dot-separated list of identifiers with optional generic arguments that spans over a single token tree group.",null,null],[13,"SpaceImmune","","",34,null],[13,"Parenthesized","","",34,null],[4,"Type","","The possible types that can appear in TL declarations.",null,null],[13,"Int","","",35,null],[13,"ParameterizedPath","","",35,null],[13,"TypeParameter","","",35,null],[0,"punctuated","","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","tl_lang_syn::punctuated","",null,null],[3,"IntoPairs","","",null,null],[4,"Pair","","",null,null],[13,"Punctuated","","",36,null],[13,"End","","",36,null],[4,"TrailingPunctuation","","",null,null],[13,"None","","",37,null],[13,"Optional","","",37,null],[4,"Count","","",null,null],[13,"ZeroOrMore","","",38,null],[13,"OneOrMore","","",38,null],[4,"Whitespace","","",null,null],[13,"None","","",39,null],[13,"Present","","",39,null],[11,"span","","",40,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"new","","",40,{"o":{"n":"punctuated"}}],[11,"is_empty","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_pairs","","",40,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","",40,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","",40,{"i":[{"n":"self"},{"n":"p"}]}],[11,"empty_or_trailing","","",40,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","",40,{"i":[{"n":"self"},{"n":"t"}]}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",41,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"trailingpunctuation"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"trailingpunctuation"}],"o":{"n":"bool"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"count"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"count"}],"o":{"n":"bool"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"whitespace"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"whitespace"}],"o":{"n":"bool"}}],[0,"span","tl_lang_syn","",null,null],[3,"Span","tl_lang_syn::span","A region of source text.",null,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"empty","","",42,{"o":{"n":"span"}}],[11,"new","","",42,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"span"}}],[11,"new_nonzero","","",42,{"i":[{"n":"nonzerousize"},{"n":"nonzerousize"}],"o":{"n":"span"}}],[11,"new_unchecked","","",42,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"span"}}],[11,"is_empty","","",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to","","",42,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"union","","",42,{"i":[{"n":"i"}],"o":{"n":"span"}}],[0,"spanned","tl_lang_syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","tl_lang_syn::spanned","",null,null],[10,"span","","",43,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"token","tl_lang_syn","Tokens representing TL language punctuation, keywords, and delimiters.",null,null],[3,"Asterisk","tl_lang_syn::token","`!`",null,null],[12,"0","","",44,null],[3,"Comma","","`,`",null,null],[12,"0","","",45,null],[3,"Colon","","`:`",null,null],[12,"0","","",46,null],[3,"Dot","","`.`",null,null],[12,"0","","",47,null],[3,"Equals","","`=`",null,null],[12,"0","","",48,null],[3,"Excl","","`!`",null,null],[12,"0","","",49,null],[3,"Hash","","`#`",null,null],[12,"0","","",50,null],[3,"LAngle","","`<`",null,null],[12,"0","","",51,null],[3,"Percent","","`%`",null,null],[12,"0","","",52,null],[3,"Plus","","`+`",null,null],[12,"0","","",53,null],[3,"Question","","`?`",null,null],[12,"0","","",54,null],[3,"RAngle","","`>`",null,null],[12,"0","","",55,null],[3,"Semicolon","","`;`",null,null],[12,"0","","",56,null],[3,"SlashSlash","","`//`",null,null],[12,"0","","",57,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",58,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",59,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",60,null],[3,"SlashAsterisk","","`/*...*/`",null,null],[12,"0","","",61,null],[3,"Empty","","`Empty`",null,null],[12,"0","","",62,null],[3,"Final","","`Final`",null,null],[12,"0","","",63,null],[3,"New","","`New`",null,null],[12,"0","","",64,null],[3,"Layer","","`LAYER`",null,null],[12,"0","","",65,null],[11,"span","","",44,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",45,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",46,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",47,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",48,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",49,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",50,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",51,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",52,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",53,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",54,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",55,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",56,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",57,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",58,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",59,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",60,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",61,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",62,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",63,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",64,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",65,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","tl_lang_syn","",66,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"new","","",66,{"i":[{"n":"span"},{"n":"u8"}],"o":{"g":["bitindex"],"n":"option"}}],[11,"new_unchecked","","",66,{"i":[{"n":"span"},{"n":"u8"}],"o":{"n":"bitindex"}}],[11,"index","","",66,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",29,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",2,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",3,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",67,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"new","","",67,{"i":[{"n":"span"},{"n":"str"}],"o":{"g":["ident"],"n":"option"}}],[11,"new_unchecked","","",67,{"i":[{"n":"span"},{"n":"str"}],"o":{"n":"ident"}}],[11,"as_str","","",67,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_lowercase","","",67,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_uppercase","","",67,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"span","","",31,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",5,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",14,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",32,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",15,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",4,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",16,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",17,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",13,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",19,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",18,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",11,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",12,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",22,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",21,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",20,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",25,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",34,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",23,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",35,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",26,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",27,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",28,{"i":[{"n":"self"}],"o":{"n":"span"}}]],"paths":[[3,"CommentMultiLine"],[3,"CommentSingleLine"],[3,"File"],[3,"Id"],[3,"BitSelector"],[3,"CombinatorId"],[3,"ConditionalParamDef"],[3,"DelimiterTypes"],[3,"DelimiterFunctions"],[3,"ItemCombinator"],[3,"ItemComment"],[3,"ItemDelimiter"],[3,"ItemLayer"],[3,"Multiplicity"],[3,"OptParam"],[3,"ParamConditional"],[3,"ParamRepeated"],[3,"ParamRepeatedIdent"],[3,"ParamTypeOnly"],[3,"ParamWithParen"],[3,"AngleBracketedGenericArguments"],[3,"ParameterizedPath"],[3,"Path"],[3,"SafeParameterizedPathSpaceImmune"],[3,"SafeParameterizedPathParenthesized"],[3,"SpaceSeparatedGenericArguments"],[3,"TypeInt"],[3,"TypeParameterizedPath"],[3,"TypeTypeParameter"],[4,"Comment"],[4,"Delimiter"],[4,"Item"],[4,"Param"],[4,"GenericArguments"],[4,"SafeParameterizedPath"],[4,"Type"],[4,"Pair"],[4,"TrailingPunctuation"],[4,"Count"],[4,"Whitespace"],[3,"Punctuated"],[3,"IntoPairs"],[3,"Span"],[8,"Spanned"],[3,"Asterisk"],[3,"Comma"],[3,"Colon"],[3,"Dot"],[3,"Equals"],[3,"Excl"],[3,"Hash"],[3,"LAngle"],[3,"Percent"],[3,"Plus"],[3,"Question"],[3,"RAngle"],[3,"Semicolon"],[3,"SlashSlash"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"SlashAsterisk"],[3,"Empty"],[3,"Final"],[3,"New"],[3,"Layer"],[3,"BitIndex"],[3,"Ident"]]};
initSearch(searchIndex);
